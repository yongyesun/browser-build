name: build
env:
    TZ: Asia/Shanghai

on:
  #schedule:
      # 每6小时跑一遍，第5小时会用kill打断并保存编译缓存ccache，
    #- cron:  '0 2,8,14,20 * * *' # 时区对cron无效，所以要提前8个小时，
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-20.04
    permissions:
      contents: write

    steps:
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 3072
        swap-size-mb: 4096
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - uses: actions/checkout@v2
    - name: env
      run: |
        echo "START_TIME=$(date '+%s')" >> $GITHUB_ENV
        mkdir -p "$PWD/run"
        echo "FLAG_STOP=$PWD/run/ninjaStop" >> $GITHUB_ENV
        echo "ROOT=$PWD" >> $GITHUB_ENV
        STABLE_VERSION=$(curl "https://omahaproxy.appspot.com/all" | grep -Fi "win64,stable" | cut -f3 -d",")
        echo STABLE_VERSION="$STABLE_VERSION" >> $GITHUB_ENV

    - run: lscpu
    - run: df -h
    - run: cd $ROOT/cache && du -h && ( ls -lR | grep "^-" | wc -l ) || true
    - run: chmod -R a+x $ROOT/script/
    - run: $ROOT/script/create_ccache_config.sh
    - run: $ROOT/script/download_depot.sh        
    - run: $ROOT/script/download_src.sh
    - run: $ROOT/script/gen.sh
        
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    
    - run: $ROOT/script/auto_kill.sh
    - run: df -h    
    - run: ccache -s
    - run: $ROOT/script/build_step.sh chrome_dll_manifest
    - run: $ROOT/script/build_step.sh chrome_dll_version
    - run: $ROOT/script/build_step.sh dependencies
    - run: $ROOT/script/build_step.sh chrome/app:chrome_dll_resources
    - run: $ROOT/script/build_step.sh chrome/app:command_ids
    - run: $ROOT/script/build_step.sh chrome/app/theme:chrome_unscaled_resources
    - run: $ROOT/script/build_step.sh chrome/chrome_elf
    - run: $ROOT/script/build_step.sh chrome/common:buildflags
    - run: $ROOT/script/build_step.sh chrome/common:version_header
    - run: $ROOT/script/build_step.sh chrome/common/profiler
    - run: $ROOT/script/build_step.sh chrome/install_static:install_static_util
    - run: $ROOT/script/build_step.sh chrome/install_static:secondary_module
    - run: $ROOT/script/build_step.sh components/crash/core/app
    - run: $ROOT/script/build_step.sh components/memory_system
    - run: $ROOT/script/build_step.sh components/policy:generated
    - run: $ROOT/script/build_step.sh content/public/app
    - run: $ROOT/script/build_step.sh crypto
    - run: $ROOT/script/build_step.sh headless:headless_non_renderer
    - run: $ROOT/script/build_step.sh headless:headless_shell_browser_lib
    - run: $ROOT/script/build_step.sh net:net_resources
    - run: $ROOT/script/build_step.sh ppapi/buildflags
    - run: $ROOT/script/build_step.sh sandbox/win:sandbox
    - run: $ROOT/script/build_step.sh third_party/cld_3/src/src:cld_3
    - run: $ROOT/script/build_step.sh third_party/wtl
    - run: $ROOT/script/build_step.sh ui/views
    - run: $ROOT/script/build_step.sh chrome_exe_version
    - run: $ROOT/script/build_step.sh copy_first_run
    - run: $ROOT/script/build_step.sh packed_resources_integrity
    - run: $ROOT/script/build_step.sh visual_elements_resources
    - run: $ROOT/script/build_step.sh base
    - run: $ROOT/script/build_step.sh chrome/app:chrome_exe_main_exports
    - run: $ROOT/script/build_step.sh chrome/app:exit_code_watcher
    - run: $ROOT/script/build_step.sh chrome/app/version_assembly:chrome_exe_manifest
    - run: $ROOT/script/build_step.sh chrome/browser:active_use_util
    - run: $ROOT/script/build_step.sh chrome/browser:chrome_process_finder
    - run: $ROOT/script/build_step.sh chrome/browser/policy:path_parser
    - run: $ROOT/script/build_step.sh chrome/common:constants
    - run: $ROOT/script/build_step.sh chrome/common/win:delay_load_failure_support
    - run: $ROOT/script/build_step.sh chrome/install_static:install_static_util
    - run: $ROOT/script/build_step.sh chrome/install_static:secondary_module
    - run: $ROOT/script/build_step.sh chrome/installer/util:constants
    - run: $ROOT/script/build_step.sh chrome/installer/util:did_run_support
    - run: $ROOT/script/build_step.sh components/crash/core/app:run_as_crashpad_handler
    - run: $ROOT/script/build_step.sh components/crash/core/common
    - run: $ROOT/script/build_step.sh components/crash/win:chrome_wer
    - run: $ROOT/script/build_step.sh components/flags_ui:switches
    - run: $ROOT/script/build_step.sh content:sandbox_helper_win
    - run: $ROOT/script/build_step.sh content/public/common:static_switches
    - run: $ROOT/script/build_step.sh gpu/command_buffer/service
    - run: $ROOT/script/build_step.sh sandbox
    - run: $ROOT/script/build_step.sh sandbox/policy
    - run: $ROOT/script/build_step.sh sandbox/policy/mojom
    - run: $ROOT/script/build_step.sh third_party/breakpad:breakpad_handler
    - run: $ROOT/script/build_step.sh third_party/breakpad:breakpad_sender
    - run: $ROOT/script/build_step.sh third_party/crashpad/crashpad/util
    - run: $ROOT/script/build_step.sh ui/gl
    - run: $ROOT/script/build_step.sh chrome/app/version_assembly:version_assembly_manifest
    - run: $ROOT/script/build_step.sh chrome/browser/web_applications/chrome_pwa_launcher
    - run: $ROOT/script/build_step.sh chrome/chrome_proxy
    - run: $ROOT/script/build_step.sh chrome/elevation_service
    - run: $ROOT/script/build_step.sh chrome/notification_helper
    - run: $ROOT/script/build_step.sh chrome
    - run: $ROOT/script/build_step.sh chrome/installer/mini_installer_archive
    - run: df -h
    - run: ccache -s
    - run: mv $ROOT/chromium/src/out/ $ROOT/ || true

    - name: Uploading ninja
      if: hashFiles(env.FLAG_STOP) == ''
      uses: actions/upload-artifact@v1
      with:
        name: ninja
        path: ./out/Release64/build.ninja
    
    - run: killall sleep

    - name: 提交更改
      run: |
        cd $ROOT
        git config core.ignorecase false
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        git config http.postBuffer 1073741824
        git add ./cache
        git commit -m "$(date '+%Y-%m-%d %H:%M:%S')更新" || echo no change,
        git push origin main || ( git pull origin main && git push origin main || true )

    - name: Uploading exe
      if: hashFiles(env.FLAG_STOP) == ''
      uses: actions/upload-artifact@v1
      with:
        name: mini_installer
        path: ./out/Release64/mini_installer.exe
